plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.netflix.dgs.codegen" version '6.0.2'
}

group = 'com.deecodeme.hexagonal.account'
version = '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:4.9.1'))
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'

    implementation(project(':ddd'))
    implementation(project(':account:domain'))
    implementation(project(':account:application'))

    compileOnly(libraries.lombok)
    annotationProcessor(libraries.lombok)

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testCompileOnly(libraries.lombok)
    testAnnotationProcessor(libraries.lombok)
}

test {
    useJUnitPlatform()
}

generateJava{
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'com.deecodeme.hexagonal.account.adapter.graphql.generated' // The package name to use to generate sources
    generateClient = true // Enable generating the type safe query API
}